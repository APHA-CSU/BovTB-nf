#!/usr/local/bin/python

""" unit_tests.py: 
        This file runs unit tests for the pipeline. 
        Each unit test should be quick to run (ie. milliseconds typically, but certainly less than second) 
        Tests that have a long run time should simplified, mocked, or be a .circleci job.
"""

import unittest
import subprocess
import tempfile
import os
import shutil
import glob

class TestPipeline(unittest.TestCase):
    
    # Where temporary data generated by tests should be stored
    # TODO: Include SetUp and TearDown routines to automatically remove data. I have a working version of this
    #     in a branch called unit_test_setup_and_teardown, but it's cumbersome for debugging
    #     To make things easier, I would like to make a build script so I can run things from VSCode (without Docker)
    temp_dirname = './'    

    def assertBashScript(self, expected_exit_code, cmd):
        """
            Runs a bash script with exit on error (set -e) and throws an exception if the exit code doesn't match the expected 
            
            Inputs: 
                error_code <int>
                cmd <list> The command as a list of strings. eg ['hello-world.bash', '-name', 'Aaron']
        """

        actual_exit_code = subprocess.run(['bash', '-e'] + cmd).returncode
        self.assertEqual(expected_exit_code, actual_exit_code)

    def test_deduplicate(self):
        """
            This introductory unit test asserts the deduplicate process completes on tinyreads without errors.
        """

        # Copy test data
        pair_id = self.temp_dirname + 'tinyreads'

        for file in glob.glob(r'./tests/data/tinyreads/*'):
            shutil.copy(file, self.temp_dirname)

        # Test the script
        self.assertBashScript(0, ['./bin/deduplicate.bash', pair_id])

    def test_mask(self):
        """
            Asserts mask.bash completes without errors when 
            the supplied sam file contains no regions of zero coverage
        """
        pair_id = self.temp_dirname + 'test'

        sam_filepath = './tests/data/tinymatch.sam'
        rpt_mask = './references/Mycbovis-2122-97_LT708304.fas.rpt.regions'

        # Convert to SAM to BAM
        with open(pair_id + '.mapped.sorted.bam', 'w') as f:
            subprocess.call(['samtools', 'view', '-S', '-b', sam_filepath], stdout=f)
       
        # Test
        self.assertBashScript(0, ['./bin/mask.bash', pair_id, rpt_mask])

    def test_combinecsv(self):
        """
            This unit test checks the correct merging of CSV files and intepretation of thresholds
        """
        csv1 = 'tests/data/assigned-test1.csv'
        csv2 = 'tests/data/bovpos_test2.csv'

        return_code = subprocess.run(['bash', '-e', './bin/CombineCsv.py', csv1, csv2]).returncode
        self.assertEqual(return_code, 0)

if __name__ == '__main__':
    unittest.main()
